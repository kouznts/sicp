;; Упражнение 1.5.
;; Бен Битобор придумал тест для проверки интерпретатора на то,
;; с каким порядком вычислений он работает, аппликативным или нормальным.
;; Бен определяет такие две процедуры:

#lang racket

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

(test 0 (p))

;; При аппликативном порядке вычислений сначала полностью вычисляются операнды,
;; а затем происходит вычисление процедуры с вычисленными значениями операндов.
;; В такое случае, при вычислении (test 0 (p)) нужно вычислить (p).
;; Для вычисления значения (p) необходимо вычислить (p) -- рекурсия, интерпретатор зацикливается.

;; При нормальном порядке операнды вычисляются по мере необходимости при использовании в теле процедуры.
;; В таком случае сначала вычисляется предикат if.
;; Его значение -- true, фукнция возвращает 0 (вычислять (p) не было необходимости).