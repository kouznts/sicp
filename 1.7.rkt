;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |1.7|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Упражнение 1.7.
;; Проверка good-enough?, которую мы использовали для вычисления квадратных корней,
;; будет довольно неэффективна для поиска квадратных корней от очень маленьких чисел.
;; Кроме того, в настоящих компьютерах арифметические операции почти всегда вычисляются с ограниченной точностью.
;; Поэтому наш тест оказывается неадекватным и для очень больших чисел.
;; Альтернативный подход к реализации good-enough? состоит в том, чтобы следить,
;; как от одной итерации к другой изменяется guess, и остановиться,
;; когда изменение оказывается небольшой долей значения приближения.
;; Разработайте процедуру вычисления квадратного корня, которая использует такой вариант проверки на завершение.
;; Верно ли, что на больших и маленьких числах она работает лучше?

;; sqrrt(x) = такое y, что y >= 0 и y^2 = x

;; среднее значение двух чисел (для улучшения приближения)
(define (average a b)
  (/ (+ a b) 2))

;; улучшаем значение приближения
;; x -- подкоренное выражение
;; y -- приближение
(define (improve y x)
  (average y (/ x y)))

;; квадрируем число (для проверки пригодности приближения)
(define (square x)
  (* x x))

;; проверка пригодности приближения
;; |y(n) - y(n-1)| < 0.001
;; пригодно, если квадрат приближения (y^2) совпадает с подкоренным числом (x) в пределах 0.001
;; y^2 и x то же, что и y = sqrrt(x)
(define (is-good-enough y prev-y)
  (< (abs (- y prev-y)) 0.001))

;; если приближение достаточно пригодно для наших целей, то процесс закончен
;; иначе -- повторить с улучшенным значением приближения
(define(sqrrt-iteration y prev-y x)
  (if (is-good-enough y prev-y)
      y
      (sqrrt-iteration (improve y x) y x)))

;; для начала предполагать, что квадратный корень любого числа равен 1
(define (sqrrt x)
  (sqrrt-iteration 0.5 1 x))

(sqrrt 0.0001)
(sqrrt 10000)